name: Python Checks

on:
  workflow_call:
    inputs:
      python_version:
        description: "Python version to use"
        required: false
        default: "3.11"
        type: string
      poetry_version:
        description: "Poetry version to use"
        required: false
        default: "1.8"
        type: string
      dir:
        description: "Working Directory"
        required: false
        default: "."
        type: string
    secrets:
        GH_TOKEN:
            description: "GitHub Token"
            required: true
        PAT:
            description: "Personal Access Token"
            required: false
permissions:
    contents: read
    issues: read
    checks: write
    pull-requests: write
jobs:
  lint-and-test:
    name: Code Quality
    runs-on: ubuntu-latest
    env:
        PYTHON_VERSION: ${{ inputs.python_version }}
        POETRY_VERSION: ${{ inputs.poetry_version }}
    defaults:
      run:
        working-directory: ${{ inputs.dir }}
    steps:
      - name: ‚á£ Checkout code
        uses: actions/checkout@v4

      - name: ‚öô Install Poetry
        shell: bash
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: ‚öô Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      #TODO: REPLACE TOKEN WITH SYSTEM-USER
      - name: ‚öô Configure Git Credentials
        shell: bash
        #language=shell
        run: |
          git config --global url."https://${{ secrets.PAT }}@github.com/".insteadOf "https://github.com/"

      - name: ‚á£ Install Packages
        shell: bash
        run: sudo apt install portaudio19-dev alsa-utils

      - name: ‚á£ Install dependencies
        shell: bash
        #language=shell
        run: poetry install

      - name: üëÄRun Pytest with coverage
        continue-on-error: true
        shell: bash
        #language=shell
        run: |
          poetry run pytest --cov=. --cov-report=xml --cov-report=term

      - name: ‚òÇÔ∏è Publish Coverage
        uses: serhiykrupka/coverage@main
        with:
          thresholdAll: 0.5
          sourceDir: src
          publishType: check
          coverageFile: ${{ inputs.dir }}/coverage.xml
          token: ${{ secrets.GH_TOKEN }}
          title: '‚òÇÔ∏è Coverage: ${{ inputs.dir }}'

      - name: üòë Run Ruff
        continue-on-error: true
        shell: bash
        #language="shell"
        run: poetry run ruff check --output-format junit -o ruff.junit.xml .

      - name: üéÅ Publish Ruff
        uses: mikepenz/action-junit-report@v5
        with:
          check_name: 'üòë Ruff: ${{ inputs.dir }}'
          report_paths: ${{ inputs.dir }}/ruff.junit.xml
          annotate_only: false
