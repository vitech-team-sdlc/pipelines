name: verify commits with commitlint
description: |
  Verify commits with commitlint according to the provided configuration.
inputs:
  modules:
    description: modules to install
    required: true
    default: "@commitlint/config-conventional,@commitlint/config-angular"
  publish:
    description: publish the commitlint as GH check
    required: false
    default: 'false'
  token:
    description: GitHub Token
    required: true
runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      shell: bash
      #language=bash
      run: |
        IFS=',' read -ra MODULES <<< "${{ inputs.modules }}"
        for module in "${MODULES[@]}"; do
          echo "Installing $module globally..."
          npm install -g "$module"
        done
        echo "All modules installed: ${{ inputs.modules }}"

    - name: Validate PR commits with commitlint
      shell: bash
      id: commitlint
      continue-on-error: true
      #language=bash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Validating PR commits with commitlint..."
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose &> commitlint.log
        else
          npx commitlint --last --verbose &> commitlint.log
        fi
#    - shell: bash
#      #language=bash
#      run: |
#        cat commitlint.log

    - name: "Create a check run"
      uses: actions/github-script@v7
      with:
        #language=javascript
        script: |
          // Read the commitlint.log content
          const fs = require('fs');
          const commitlintLog = fs.readFileSync('commitlint.log', 'utf8');
          
          const pullRequest = context.payload.pull_request
          const conclusion = "success"
          const headSha = (pullRequest && pullRequest.head.sha) || github.context.sha
          core.info(`‚ÑπÔ∏è Posting with conclusion '${conclusion}' to ${link} (sha: ${headSha}) job: ${context.job.status}`)

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head_sha: headSha,
            name: "üåöCommitlint",
            status: "completed",
            conclusion: conclusion,
            output: {
              title: "1üåöCommitlint",
              summary: `2Commitlint ${context.job.status}`,
              text: "3text",
            },
          });
